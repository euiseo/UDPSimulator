///////////////////////////////////////////////////////////
//  OperationData.cs
//  Implementation of the Class OperationData
//  Generated by Enterprise Architect
//  Created on:      07-8-2023 오후 3:27:07
//  Original author: 김의서
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;


namespace TcmsSimulator.TCMSData
{
	public class OperationData : ITCMSBaseData
	{
		#region ---［ 맴버, 프로퍼티 ］------------------------------------------------------------
		public const int OperationDataSize = 53;
		private string _address;
		private int _sequenceCounter;
		private int _yy;
		private int _mm;
		private int _dd;
		private int _hh;
		private int _MM;
		private int _sec;

		private int _trainQuantity;

		private string _trainNo;
		private string _trainOrgan;
		private string _currentStationCode;
		private string _nextStationCode;
		private string _endStationCode;
		private int _km;
		private int _speed;
		private int _ATCSpeed;
		private int _totalStationDistance;
		private int _BackwardRate;
		private int _StopRate;

		private int _boarding1;
		private int _boarding2;
		private int _boarding3;
		private int _boarding4;
		private int _boarding5;
		private int _boarding6;
		private int _boarding7;
		private int _boarding0;

		private int _Hcr0;		
		private int _Hcr1;
		#endregion ---［ 맴버, 프로퍼티 ］------------------------------------------------------------

		public string Address
		{
			get { return _address; }
			set { _address = value; }
		}
		public int SequenceCounter
		{
			get { return _sequenceCounter; }
			set { _sequenceCounter = value; }
		}

		public OperationData()
		{

		}

		~OperationData()
		{

		}

		/// 
		/// <param name="address"></param>
		/// <param name="sequenceCounter"></param>
		public void SetData(string Address, int SequenceCounter)
		{
			this._address = Address;
			this._sequenceCounter = SequenceCounter;
		}

		public void SetData(string Address, int SequenceCounter, 
			int Yy, int Mm, int Dd, int Hh, int Minute, int Sec,
			int TrainQuantity,
			string TrainNo, string TrainOrgan,
			string CurrentStationCode, string NextStationCode, string EndStationCode, int KM, int Speed,
			int AtcSpeed, int TotalStationDistance, int BackwardRate, int StopRate, 
			int Boarding1,	int Boarding2,	int Boarding3,	int Boarding4,	int Boarding5,
			int Boarding6,	int Boarding7,	int Boarding0,int Hcr0, int Hcr1)
		{
			_address = Address;
			_sequenceCounter = SequenceCounter;
			_yy = Yy;
			_mm = Mm;
			_dd = Dd;
			_hh = Hh;
			_MM = Minute;
			_sec = Sec;

			_trainQuantity = TrainQuantity;

			_trainNo = TrainNo;
			_trainOrgan = TrainOrgan;
			_currentStationCode = CurrentStationCode;
			_nextStationCode = NextStationCode;
			_endStationCode = EndStationCode;
			_km = KM;
			_speed = Speed;
			_ATCSpeed = AtcSpeed;
			_totalStationDistance = TotalStationDistance;
			_BackwardRate = BackwardRate;
			_StopRate = StopRate;

			_boarding1 = Boarding1;
			_boarding2 = Boarding2;
			_boarding3 = Boarding3;
			_boarding4 = Boarding4;
			_boarding5 = Boarding5;
			_boarding6 = Boarding6;
			_boarding7 = Boarding7;
			_boarding0 = Boarding0;

			_Hcr0 = Hcr0;
			_Hcr1 = Hcr1;
		}

		/// 
		/// <param name="object"></param>
		public byte[] ToByte()
		{
			int pos = 0;
			byte[] byteOperationData = new byte[OperationDataSize];

			byte[] tmpByte = BitConverter.GetBytes(SequenceCounter);
			byte[] dt2 = new byte[2];
			Array.Copy(tmpByte, 0, dt2, 0, 2);
			Array.Reverse(dt2);
			//시퀀스 카운터 (2byte)
			Array.Copy(dt2, 0, byteOperationData, 0, 2);
			pos += 2;
			//송신지 주소(4byte)
			string[] ips = Address.Split('.');
			byte ip_a = Convert.ToByte(ips[0]);
			byte ip_b = Convert.ToByte(ips[1]);
			byte ip_c = Convert.ToByte(ips[2]);
			byte ip_d = Convert.ToByte(ips[3]);
			byteOperationData[pos] = ip_a; pos += 1;
			byteOperationData[pos] = ip_b; pos += 1;
			byteOperationData[pos] = ip_c; pos += 1;
			byteOperationData[pos] = ip_d; pos += 1;
			//예비 6byte
			pos += 6;
			//년
			byteOperationData[pos] = (byte)_yy; pos += 1;
			//월
			byteOperationData[pos] = (byte)_mm; pos += 1;
			//일
			byteOperationData[pos] = (byte)_dd; pos += 1;
			//시
			byteOperationData[pos] = (byte)_hh; pos += 1;
			//분
			byteOperationData[pos] = (byte)_MM; pos += 1;
			//초
			byteOperationData[pos] = (byte)_sec; pos += 1;
			//차량조성정보
			byteOperationData[pos] = (byte)_trainQuantity; pos += 1;
			//예비 1byte
			pos += 1;
			//열차번호
			byte[] dt3 = Encoding.Default.GetBytes(_trainNo);
			Array.Copy(dt3, 0, byteOperationData, pos, 2); pos += 2;
			//편성번호
			byte[] dt4 = Encoding.Default.GetBytes(_trainOrgan);
			Array.Copy(dt4, 0, byteOperationData, pos, 1); pos += 1;
			//예비 1byte
			pos += 1;
			//현재역 코드
			byte[] dt5 = Encoding.Default.GetBytes(_currentStationCode);
			Array.Copy(dt5, 0, byteOperationData, pos, 1); pos += 1;
			//다음역 코드
			byte[] dt6 = Encoding.Default.GetBytes(_nextStationCode);
			Array.Copy(dt6, 0, byteOperationData, pos, 1); pos += 1;
			//종착역 코드
			byte[] dt7 = Encoding.Default.GetBytes(_endStationCode);
			Array.Copy(dt7, 0, byteOperationData, pos, 1); pos += 1;
			//예비 1byte
			pos += 1;
			//적산주행거리
			byte[] dt8 = BitConverter.GetBytes(_km);
			Array.Reverse(dt8);
			Array.Copy(dt8, 0, byteOperationData, pos, 4); pos += 4;
			//속도
			byte[] dt9 = BitConverter.GetBytes(_speed);
			Array.Copy(dt9, 0, tmpByte, 0, 2);
			Array.Reverse(tmpByte);
			Array.Copy(tmpByte, 0, byteOperationData, pos, 2); pos += 2;
			//ATC속도
			byte[] dt10 = BitConverter.GetBytes(_ATCSpeed);
			Array.Copy(dt10, 0, tmpByte, 0, 2);
			Array.Reverse(tmpByte);
			Array.Copy(tmpByte, 0, byteOperationData, pos, 2); pos += 2;
			//역간적산거리
			byte[] dt11 = BitConverter.GetBytes(_totalStationDistance);
			Array.Copy(dt11, 0, tmpByte, 0, 2);
			Array.Reverse(tmpByte);
			Array.Copy(tmpByte, 0, byteOperationData, pos, 2); pos += 2;
			//예비 2byte
			pos += 2;
			//역행 1byte
			byteOperationData[pos] = (byte)_BackwardRate;
			pos += 1;
			//제동 1byte
			byteOperationData[pos] = (byte)_StopRate;
			pos += 1;
			//1호차탑승률 1byte
			byteOperationData[pos] = (byte)_boarding1;
			pos += 1;
			//2호차탑승률 1byte
			byteOperationData[pos] = (byte)_boarding2;
			pos += 1;
			//3호차탑승률 1byte
			byteOperationData[pos] = (byte)_boarding3;
			pos += 1;
			//4호차탑승률 1byte
			byteOperationData[pos] = (byte)_boarding4;
			pos += 1;
			//5호차탑승률 1byte
			byteOperationData[pos] = (byte)_boarding5;
			pos += 1;
			//6호차탑승률 1byte
			byteOperationData[pos] = (byte)_boarding6;
			pos += 1;
			//7호차탑승률 1byte
			byteOperationData[pos] = (byte)_boarding7;
			pos += 1;
			//0호차탑승률 1byte
			byteOperationData[pos] = (byte)_boarding0;
			pos += 1;
			//예비 2byte
			pos += 2;
			
			return byteOperationData;
		}

	}//end OperationData
}