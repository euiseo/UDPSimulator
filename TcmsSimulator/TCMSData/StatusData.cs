///////////////////////////////////////////////////////////
//  StatusData.cs
//  Implementation of the Class StatusData
//  Generated by Enterprise Architect
//  Created on:      07-8-2023 오후 3:27:07
//  Original author: 김의서
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;


namespace TcmsSimulator.TCMSData
{
	/// <summary>
	/// Status Data 39byte
	/// </summary>
	public class StatusData : ITCMSBaseData {
		public const int StatusDataSize = 40;
		#region ---［ 맴버, 프로퍼티 ］------------------------------------------------------------
		private string _address;
		private int _reserved;
		private int _sequenceCounter;
		private string _serialNo;
		private bool _statusInspector;
		private bool _statusFastnerSleeperModule;
		private bool _statusTunnelWallModule;
		private bool _statusRailModule;
		private bool _statusPantaModule;
		private bool _statusHeightModule;
		private string _swVersion;

		public string Address
		{
			get { return _address; }
			set { _address = value; }
		}
		public int Reserved
		{
			get { return _reserved; }
			set { _reserved = value; }
		}
		public int SequenceCounter
		{
			get { return _sequenceCounter; }
			set { _sequenceCounter = value; }
		}
		public string SerialNo
		{
			get { return _serialNo; }
			set { _serialNo = value; }
		}
		public bool StatusInspector
		{
			get { return _statusInspector; }
			set { _statusInspector = value; }
		}
		public bool StatusFastnerSleeperModule
		{
			get { return _statusFastnerSleeperModule; }
			set { _statusFastnerSleeperModule = value; }
		}
		public bool StatusTunnelWallModule
		{
			get { return _statusTunnelWallModule; }
			set { _statusTunnelWallModule = value; }
		}
		public bool StatusRailModule
		{
			get { return _statusRailModule; }
			set { _statusRailModule = value; }
		}
		public bool StatusPantaModule
		{
			get { return _statusPantaModule; }
			set { _statusPantaModule = value; }
		}
		public bool StatusHeightModule
		{
			get { return _statusHeightModule; }
			set { _statusHeightModule = value; }
		}
		public string SwVersion
		{
			get { return _swVersion; }
			set { _swVersion = value; }
		}
		#endregion ---［ 맴버, 프로퍼티 ］------------------------------------------------------------

		public StatusData()
		{

		}

		~StatusData()
		{

		}

		enum InspectorType
		{
			Inspector = 1  << 7,
			FastnerSleeperModule = 1 << 4,
			TunnelWallModule = 1 << 3,
			RailModule = 1 << 2,
			PantaModule = 1 << 1,
			HeightModule = 1
		}

		/// 
		/// <param name="address"></param>
		/// <param name="sequenceCounter"></param>
		public void SetData(string Address, int SequenceCounter)
		{
			_address = Address;
			_sequenceCounter = SequenceCounter;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="Address"></param>
		/// <param name="SequenceCounter">시퀀스카운터</param>
		/// <param name="Reserved"></param>
		/// <param name="SerialNo">장치식별자(시리얼번호 또는 Mac Address)</param>
		/// <param name="StatusFastnerSleeperModule">침목및체결구결함분석모듈상태</param>
		/// <param name="StatusHeightModule">높이편위마모분석 모듈상태</param>
		/// <param name="StatusInspector">검측시스템 운영상태</param>
		/// <param name="StatusPantaModule">팬터그래프분석 모듈상태</param>
		/// <param name="StatusRailModule">강체전차선로 결함분석 모듈상태</param>
		/// <param name="StatusTunnelWallModule">터널벽면 결함분석 모듈상태</param>
		/// <param name="SwVersion">S/W 버전</param>
		public void SetData(string Address, int SequenceCounter, string SwVersion, int Reserved, string SerialNo , bool StatusInspector
			, bool StatusFastnerSleeperModule, bool StatusTunnelWallModule, bool StatusRailModule, bool  StatusPantaModule, bool StatusHeightModule
			)
		{
			_address = Address;
			_sequenceCounter = SequenceCounter;
			_reserved = Reserved;
			_serialNo = SerialNo;
			_swVersion = SwVersion;
			_statusInspector = StatusInspector;
			_statusFastnerSleeperModule = StatusFastnerSleeperModule;
			_statusTunnelWallModule = StatusTunnelWallModule;
			_statusRailModule = StatusRailModule;
			_statusPantaModule = StatusPantaModule;
			_statusHeightModule = StatusHeightModule;
		}

		/// <summary>
		/// 시퀀스 카운터(2) + 송신지 주소(4) + 예비(7) + 장치식별자(6) + 예비(2) + S/W버전(2) + 예비(14) + 검측시스템운영상태 1BYTE + 예배(2)
		/// 총 39바이트
		/// </summary>
		/// <returns>byte array 39바이트</returns>
		public byte[] ToByte()
		{
			const int HEADER_SIZE = 40;
			int pos = 0;
			byte[] byteStatusData = new byte[StatusDataSize + HEADER_SIZE];

			//헤더구성
			//SequenceCounter 4 
			byteStatusData[pos++] = 0x00;
			byteStatusData[pos++] = 0x01;
			byteStatusData[pos++] = 0x01;
			byteStatusData[pos++] = 0x01;
			//Protocol Version 2
			byteStatusData[pos++] = 0x01;
			byteStatusData[pos++] = 0x00;
			//MSG Type Version 2
			byteStatusData[pos++] = 0x50;
			byteStatusData[pos++] = 0x64;
			//ComID 4    - 26020340 (DEC)
			byteStatusData[pos++] = 0x26;
			byteStatusData[pos++] = 0x02;
			byteStatusData[pos++] = 0x03;
			byteStatusData[pos++] = 0x40;
			//etbTopCnt 4
			byteStatusData[pos++] = 0x00;
			byteStatusData[pos++] = 0x00;
			byteStatusData[pos++] = 0x00;
			byteStatusData[pos++] = 0x00;
			//opTrnTopoCnt 4
			byteStatusData[pos++] = 0x00;
			byteStatusData[pos++] = 0x00;
			byteStatusData[pos++] = 0x00;
			byteStatusData[pos++] = 0x00;
			//DataSetLength 4
			byteStatusData[pos++] = 0x00;
			byteStatusData[pos++] = 0x00;
			byteStatusData[pos++] = 0x00;
			byteStatusData[pos++] = 0x38;
			//Reserved 4
			byteStatusData[pos++] = 0x00;
			byteStatusData[pos++] = 0x00;
			byteStatusData[pos++] = 0x00;
			byteStatusData[pos++] = 0x00;
			//ReplyCOmID 4
			byteStatusData[pos++] = 0x00;
			byteStatusData[pos++] = 0x00;
			byteStatusData[pos++] = 0x00;
			byteStatusData[pos++] = 0x00;
			//ReplyIpAddress 4
			byteStatusData[pos++] = 0x00;
			byteStatusData[pos++] = 0x00;
			byteStatusData[pos++] = 0x00;
			byteStatusData[pos++] = 0x00;
			//HeaderFCS 4
			byteStatusData[pos++] = 0x00;
			byteStatusData[pos++] = 0x00;
			byteStatusData[pos++] = 0x00;
			byteStatusData[pos++] = 0x00;

			byte[] tmpByte = BitConverter.GetBytes(SequenceCounter);
			byte[] dt1 = new byte[2];
			Array.Copy(tmpByte, 0, dt1, 0, 2);
			Array.Reverse(dt1);
			string[] ips = Address.Split('.');
			byte ip_a = Convert.ToByte(ips[0]);
			byte ip_b = Convert.ToByte(ips[1]);
			byte ip_c = Convert.ToByte(ips[2]);
			byte ip_d = Convert.ToByte(ips[3]);

			//시퀀스 카운터 (2byte)
			Array.Copy(dt1, 0, byteStatusData, pos, dt1.Length);
			pos = dt1.Length;
			//송신지 주소(4byte)
			byteStatusData[pos] = ip_a;
			pos += 1;
			byteStatusData[pos] = ip_b;
			pos += 1;
			byteStatusData[pos] = ip_c;
			pos += 1;
			byteStatusData[pos] = ip_d;
			pos += 1;
			//예비 7byte
			pos += 7;
			//장치식별자 6byte(시리얼 번호 또는 Mac Address)
			byte[] dt2 = Encoding.Default.GetBytes(SerialNo);
			byte[] dttmp = new byte[6];
			Array.Copy(dttmp, 0, byteStatusData, pos, dttmp.Length);
			
			Array.Copy(dt2, 0, byteStatusData, pos, dt2.Length);
			pos += 6;
			//예비 2byte
			pos += 2;
			//S/W버전 2byte
			tmpByte = Encoding.Default.GetBytes(SwVersion);
			byte[] dt3 = new byte[2];
			Array.Copy(tmpByte, 0, dt3, 0, 2);
			Array.Copy(dt3, 0, byteStatusData, pos, dt3.Length);
			pos += dt3.Length;
			//예비 14byte
			pos += 14;
			//검측시스템운영상태 1BYTE
			byte dt4 = new byte();
			if (StatusInspector) //검측시스템운영상태
				dt4 += (int)InspectorType.Inspector;
			if (StatusFastnerSleeperModule) //팬터그래프분석모듈상태
				dt4 += (int)InspectorType.FastnerSleeperModule;
			if (StatusTunnelWallModule) //
				dt4 += (int)InspectorType.TunnelWallModule;
			if (StatusRailModule) //
				dt4 += (int)InspectorType.RailModule;
			if (StatusPantaModule) //
				dt4 += (int)InspectorType.PantaModule;
			if (StatusHeightModule) //
				dt4 += (int)InspectorType.HeightModule;
			//dt4 = (dt4 | 0x01);
			byteStatusData[pos] = dt4;
			pos += 1;

			return byteStatusData;
		}

	}//end StatusData
}