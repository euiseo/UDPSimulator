///////////////////////////////////////////////////////////
//  Socket_Server.cs
//  Implementation of the Class SocketServer
//  Generated by Enterprise Architect
//  Created on:      07-8-2023 오후 5:27:24
//  Original author: 김의서
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Net.Sockets;
using System.Configuration;
using System.Net;
using System.Threading.Tasks;
using System.Threading;

namespace TcmsSimulator.Socket
{
    public class TCPSocketServer
    {
        #region  변수 및 속성값 생성

        Thread _networkThread;
        public ManualResetEvent AllDone { get; set; } = new ManualResetEvent(false);
        public delegate void ReadCompleteDeletegate(byte[] receivedData);
        public ReadCompleteDeletegate NetworkReadHandler{ get; set; }

        private int _bufferSize;
        private string _IP;
        private int _port;
        private ProtocolType _protocolType;
        private SocketType _socketType;
        public bool isRunning = false;

        public string IP
        {
            get { return _IP; }
            set { _IP = value; }
        }
        public int port
        {
            get { return _port; }
            set { _port = value; }
        }
        public ProtocolType protocolType
        {
            get { return _protocolType; }
            set { _protocolType = value; }
        }
        public SocketType socketType
        {
            get { return _socketType; }
            set { _socketType = value; }
        }

        #endregion 변수 및 속성값 생성

        public TCPSocketServer()
        {
        }
        public TCPSocketServer(int bufferSize, string IP, int port, ProtocolType protocolType, SocketType socketType)
        {
            //int.TryParse(ConfigurationManager.AppSettings["BufferSize"], out _bufferSize) ;
            //int.TryParse(ConfigurationManager.AppSettings["BufferSize"], out _port);
            _bufferSize = bufferSize;
            _IP = IP;
            _port = port;
            _protocolType = protocolType;
            _socketType = socketType;
        }

        ~TCPSocketServer()
        {

        }

        /// 
        /// <param name="MulticastYN"></param>
        /// <param name="ClientsIP"></param>
        public void SetData(int bufferSize, string IP, int port, ProtocolType protocolType, SocketType socketType)
        {
            _bufferSize = bufferSize;
            _IP = IP;
            _port = port;
            _protocolType = protocolType;
            _socketType = socketType;
        }

        public void Start()
        {
            _networkThread = new Thread(new ThreadStart(StartListening));
            _networkThread.Start();
            isRunning = true;
        }


        /// <returns></returns>
        public bool Stop()
        {
            isRunning = false;
            if (_networkThread != null)
            {
                _networkThread.Interrupt();
                _networkThread = null;
            }

            return true;
        }

        private void StartListening()
        {
            try
            {
                // Establish the local endpoint for the socket.  
                // The DNS name of the computer  
                // running the listener is "host.contoso.com".              
                IPAddress ipAddress;
                IPEndPoint localEndPoint;

                ipAddress = IPAddress.Parse(_IP);
                localEndPoint = new IPEndPoint(ipAddress, _port);

                // Create a TCP/IP socket.  
                System.Net.Sockets.Socket listener = new System.Net.Sockets.Socket(ipAddress.AddressFamily, _socketType, _protocolType);

                // Bind the socket to the local endpoint and listen for incoming connections.  
                try
                {
                    listener.Bind(localEndPoint);
                    listener.Listen(100);

                    while (true)
                    {
                        // Set the event to nonsignaled state.  
                        AllDone.Reset();

                        // Start an asynchronous socket to listen for connections.  
                        listener.BeginAccept(new AsyncCallback(AcceptCallback), listener);

                        // Wait until a connection is made before continuing.  
                        AllDone.WaitOne();
                    }
                }
                catch (Exception e)
                {
                    isRunning = false;
                    TcmsSimulator.Util.Utils.WriteError(e.Message);
                    //LogHelper.Instance.Error(e.ToString());
                }
            }
            catch (Exception e)
            {
                isRunning = false;
                //LogHelper.Instance.Error(e.Message);
                TcmsSimulator.Util.Utils.WriteError(e.Message);
            }
        }

        public virtual void AcceptCallback(IAsyncResult ar)
        {
            try
            {
                // Signal the main thread to continue.  
                AllDone.Set();

                // Get the socket that handles the client request. 
                System.Net.Sockets.Socket listener = (System.Net.Sockets.Socket)ar.AsyncState;
                System.Net.Sockets.Socket handler = listener.EndAccept(ar);


                //StateObject state = (StateObject)ar.AsyncState;
                StateObject state = new StateObject(_bufferSize);
                state.Listener = listener;
                state.WorkSocket = handler;

                handler.BeginReceive(state.DataBuffer, 0, state.DataBufferSize, 0, new AsyncCallback(DataReadCallback), state);
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                //LogHelper.Instance.Error(e.Message);
                TcmsSimulator.Util.Utils.WriteError(e.Message);
            }
        }
        public virtual void DataReadCallback(IAsyncResult ar)
        {
            StateObject state = (StateObject)ar.AsyncState;
            System.Net.Sockets.Socket handler = state.WorkSocket;

            try
            {
                if (!handler.Connected)
                {
                    DisconnectSocket(handler);
                    return;
                }

                int bytesRead = handler.EndReceive(ar);

                //if (string.IsNullOrEmpty(remoteIpaddress) == false)
                if(NetworkReadHandler != null)
                    NetworkReadHandler(state.DataBuffer);
            }
            catch(Exception e)
            {
                TcmsSimulator.Util.Utils.WriteError(e.Message);
            }

        }//end SocketServer

        public void DisconnectSocket(System.Net.Sockets.Socket socket)
        {
            try
            {
                if (socket != null)
                {
                    string ipaddress = ((IPEndPoint)socket.RemoteEndPoint).Address.ToString();  // 클라이언트 IP
                    int port = ((IPEndPoint)socket.LocalEndPoint).Port;                         // 클라이언트가 접속된 로컬 포트

                    if (socket.Connected == true)
                        socket.Shutdown(SocketShutdown.Both);

                    socket.Close();
                    socket = null;
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.ToString());
                TcmsSimulator.Util.Utils.WriteError(e.Message);
            }
        }
    }
}