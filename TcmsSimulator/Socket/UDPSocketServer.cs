///////////////////////////////////////////////////////////
//  Socket_Server.cs
//  Implementation of the Class SocketServer
//  Generated by Enterprise Architect
//  Created on:      07-8-2023 오후 5:27:24
//  Original author: 김의서
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Net.Sockets;
using System.Configuration;
using System.Net;
using System.Threading.Tasks;
using System.Threading;

namespace TcmsSimulator.Socket
{
    public class UDPSocketServer
    {
        #region  변수 및 속성값 생성

        Thread _networkThread;
        public ManualResetEvent AllDone { get; set; } = new ManualResetEvent(false);
        public delegate void ReadCompleteDeletegate(byte[] receivedData);
        public ReadCompleteDeletegate NetworkReadHandler{ get; set; }

        private int _bufferSize;
        private string _IP;
        private int _port;
        private ProtocolType _protocolType;
        private SocketType _socketType;

        UdpClient srv;
        public bool isRunning = false;

        public string IP
        {
            get { return _IP; }
            set { _IP = value; }
        }
        public int port
        {
            get { return _port; }
            set { _port = value; }
        }
        public ProtocolType protocolType
        {
            get { return _protocolType; }
            set { _protocolType = value; }
        }
        public SocketType socketType
        {
            get { return _socketType; }
            set { _socketType = value; }
        }

        #endregion 변수 및 속성값 생성

        public UDPSocketServer()
        {
        }
        public UDPSocketServer(int bufferSize, string IP, int port)
        {
            _bufferSize = bufferSize;
            _IP = IP;
            _port = port;
            _protocolType = ProtocolType.Udp;
            _socketType = SocketType.Dgram;
        }

        ~UDPSocketServer()
        {
            Stop();
        }

        /// 
        /// <param name="MulticastYN"></param>
        /// <param name="ClientsIP"></param>
        public void SetData(int bufferSize, string IP, int port)
        {
            _bufferSize = bufferSize;
            _IP = IP;
            _port = port;
        }

        public void Start()
        {
            isRunning = true;
            _networkThread = new Thread(new ThreadStart(StartListening));
            _networkThread.Start();
        }


        /// <returns></returns>
        public bool Stop()
        {
            isRunning = false;
            if (_networkThread != null)
            {
                srv.Close();
                srv.Dispose();
                srv = null;
                _networkThread.Interrupt();
                _networkThread = null;
            }

            return true;
        }

        private void StartListening()
        {
            try
            {       
                srv = new UdpClient();
                IPEndPoint localEP = new IPEndPoint(IPAddress.Any, _port);
                srv.Client.Bind(localEP);

                IPAddress multicastIP = IPAddress.Parse(_IP);
                srv.JoinMulticastGroup(multicastIP);

                try
                {
                    IPEndPoint remoteEP = new IPEndPoint(IPAddress.Any, 0);
                    while (isRunning)
                    {
                        AllDone.Reset();
                        var result = srv.BeginReceive(new AsyncCallback(ReadCallback), null);
                        AllDone.WaitOne();
                    }
                }
                catch (Exception e)
                {
                    AllDone.Reset();
                    isRunning = false;
                    TcmsSimulator.Util.Utils.WriteError(e.Message);
                }
            }
            catch (Exception e)
            {
                AllDone.Reset();
                isRunning = false;
                TcmsSimulator.Util.Utils.WriteError(e.Message);
            }
        }

        public virtual void ReadCallback(IAsyncResult ar)
        {
            try
            {
                AllDone.Set();
                byte[] receivedData;
                IPEndPoint ipEndPoint = new IPEndPoint(IPAddress.Any, _port);


                if (srv != null)
                {
                    receivedData = srv.EndReceive(ar, ref ipEndPoint);
                }

                else
                {
                    return;
                }

                NetworkReadHandler(receivedData);

                Console.WriteLine("[Receive] {0} 로부터 {1} 바이트 수신", receivedData.ToString(), receivedData.Length);
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                TcmsSimulator.Util.Utils.WriteError(e.Message);
            }
        }
    }
}