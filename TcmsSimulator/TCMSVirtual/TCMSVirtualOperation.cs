///////////////////////////////////////////////////////////
//  TMCSVirtualServer.cs
//  Implementation of the Class TMCSVirtualServer
//  Generated by Enterprise Architect
//  Created on:      07-8-2023 ø¿»ƒ 5:24:52
//  Original author: ±Ë¿«º≠
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using TcmsSimulator.Socket;
using System.Net.Sockets;
using System.Configuration;
using System.Threading;
using TcmsSimulator.TCMSData;

namespace TcmsSimulator.TMCSVirtual
{
	public class TMCSVirtualOperationServer
	{
		Thread _networkThread;
		bool isRunning = false;
		private UDPSocketClient _TmcsVirtualOperation = null;
		OperationData SendData = new OperationData();

		int counter = 0;

		public UDPSocketClient TmcsVirtualClient
		{
			get { return _TmcsVirtualOperation; }
		}

		public TMCSVirtualOperationServer()
		{
			int bufferSize;
			int OperationPort;
			ProtocolType protocolType;
			SocketType socketType;

			string OperationIP = ConfigurationManager.AppSettings["OperationIP"];
			int.TryParse(ConfigurationManager.AppSettings["BufferSize"], out bufferSize);
			int.TryParse(ConfigurationManager.AppSettings["OperationPort"], out OperationPort);

			protocolType = TcmsSimulator.Util.EnumUtil<ProtocolType>.Parse(ConfigurationManager.AppSettings["ProtocolType"]);
			socketType = TcmsSimulator.Util.EnumUtil<SocketType>.Parse(ConfigurationManager.AppSettings["SocketType"]);

			_TmcsVirtualOperation = new UDPSocketClient(bufferSize, OperationIP, OperationPort);
		}

		~TMCSVirtualOperationServer()
		{

		}

		public void SetData(int bufferSize, string OperationIP, int OperationPort, ProtocolType protocolType, SocketType socketType)
		{
			_TmcsVirtualOperation.SetData(bufferSize, OperationIP, OperationPort);
		}
		public void SetOperationData(OperationData data)
		{
			SendData = data;
		}

		public void StartOperation()
		{
			_networkThread = new Thread(new ThreadStart(StartOperationSending));
			isRunning = true;
			_networkThread.Start();
		}

		public void StopOperation()
		{
			isRunning = false;
		}

		private void StartOperationSending()
		{
			while(isRunning)
            {
				_TmcsVirtualOperation.Send(CreateOperationData());
				Thread.Sleep(500);
			}
			_TmcsVirtualOperation.Disconnect();
		}

		public byte[] CreateOperationData()
		{
			counter += counter;
			SendData.SetData(ConfigurationManager.AppSettings["OperationIP"], counter);

			return SendData.ToByte();
		}
	}//end TMCSVirtualServer
}